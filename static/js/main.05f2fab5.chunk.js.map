{"version":3,"sources":["Component/A.js","Component/B.js","Component/C.js","Component/D.js","App.js","serviceWorker.js","reducer.js","index.js"],"names":["A","this","props","x","onClick","incrementX","Component","connect","state","dispatch","type","B","y","incrementZ","C","z","incrementY","D","w","incrementW","App","className","Boolean","window","location","hostname","match","initialState","store","createStore","action","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oSAGMA,E,iLAEE,OACI,uCACYC,KAAKC,MAAMC,EACnB,6BACA,4BAAQC,QAASH,KAAKC,MAAMG,YAA5B,oB,GANAC,aAyBDC,eAXS,SAACC,GAAD,MAAY,CAClCL,EAAEK,EAAML,MAGe,SAACM,GAAD,MAAc,CACnCJ,WAAW,kBAAII,EAAS,CACpBC,KAAK,oBAKEH,CAA6CP,GCzBtDW,E,iLAEE,OACI,uCACYV,KAAKC,MAAMU,EACnB,6BACA,4BAAQR,QAASH,KAAKC,MAAMW,YAA5B,oB,GANAP,aAyBDC,eAXS,SAACC,GAAD,MAAY,CAClCI,EAAEJ,EAAMI,MAGe,SAACH,GAAD,MAAc,CACnCI,WAAW,kBAAIJ,EAAS,CACpBC,KAAK,oBAKEH,CAA6CI,GCzBtDG,E,iLAEE,OACI,uCACYb,KAAKC,MAAMa,EACnB,6BACA,4BAAQX,QAASH,KAAKC,MAAMc,YAA5B,oB,GANAV,aAyBDC,eAXS,SAACC,GAAD,MAAY,CAClCO,EAAEP,EAAMO,MAGe,SAACN,GAAD,MAAc,CACnCO,WAAW,kBAAIP,EAAS,CACpBC,KAAK,oBAKEH,CAA6CO,GCzBtDG,E,iLAEE,OACI,uCACYhB,KAAKC,MAAMgB,EACnB,6BACA,4BAAQd,QAASH,KAAKC,MAAMiB,YAA5B,6B,GANAb,aAyBDC,eAXS,SAACC,GAAD,MAAY,CAClCU,EAAEV,EAAMU,MAGe,SAACT,GAAD,MAAc,CACnCU,WAAW,kBAAIV,EAAS,CACpBC,KAAK,oBAKEH,CAA6CU,G,MCT7CG,MAZf,WACE,OACE,yBAAKC,UAAU,OAAf,6BAEE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCFcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DClBN,IAAMC,EAAe,CACjBxB,EAAE,EACFS,EAAE,EACFG,EAAE,EACFG,EAAE,G,QCMAU,EAAQC,aDHC,WAAmC,IAAlCrB,EAAiC,uDAAzBmB,EAAcG,EAAW,uCAC/C,OAAQA,EAAOpB,MACb,IAAK,cACD,MAAO,CACHP,EAAEK,EAAML,EAAE,EACVS,EAAEJ,EAAMI,EACRG,EAAEP,EAAMO,EACRG,EAAEV,EAAMU,GAEZ,IAAK,cACL,MAAO,CACHf,EAAEK,EAAML,EACRS,EAAEJ,EAAMI,EAAE,EACVG,EAAEP,EAAMO,EACRG,EAAEV,EAAMU,GAEZ,IAAK,cACL,MAAO,CACHf,EAAEK,EAAML,EACRS,EAAEJ,EAAMI,EACRG,EAAEP,EAAMO,EAAE,EACVG,EAAEV,EAAMU,GAEZ,IAAK,cACL,OAAGV,EAAML,EAAE,IAAI,EACR,CACHA,EAAEK,EAAML,EACRS,EAAEJ,EAAMI,EACRG,EAAEP,EAAMO,EACRG,EAAEV,EAAMU,EAAE,GAIJ,CACNf,EAAEK,EAAML,EACRS,EAAEJ,EAAMI,EACRG,EAAEP,EAAMO,EACRG,EAAEV,EAAMU,GAIhB,QACI,OAAOV,MCrCfuB,IAASC,OACL,kBAAC,IAAD,CAAUJ,MAAOA,GACb,kBAAC,EAAD,OACSK,SAASC,eAAe,SFkHnC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.05f2fab5.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nclass A extends Component {\n    render() {\n        return (\n            <div>\n                A, x = {this.props.x} \n                <br></br>\n                <button onClick={this.props.incrementX}>Increment X</button>\n            </div>\n        )\n    }\n}\n\n//redux specific mappers\n\nconst mapStateToProps = (state) => ({\n  x:state.x\n});\n\nconst mapDispatchToProps=(dispatch) =>({\n    incrementX:()=>dispatch({\n        type:'INCREMENT_X'\n    })\n})\n\n//export\nexport default connect(mapStateToProps, mapDispatchToProps)(A)\n\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nclass B extends Component {\n    render() {\n        return (\n            <div>\n                B, y = {this.props.y} \n                <br></br>\n                <button onClick={this.props.incrementZ}>Increment Z</button>\n            </div>\n        )\n    }\n}\n\n//redux specific mappers\n\nconst mapStateToProps = (state) => ({\n  y:state.y\n});\n\nconst mapDispatchToProps=(dispatch) =>({\n    incrementZ:()=>dispatch({\n        type:'INCREMENT_Z'\n    })\n})\n\n//export\nexport default connect(mapStateToProps, mapDispatchToProps)(B)\n\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nclass C extends Component {\n    render() {\n        return (\n            <div>\n                C, z = {this.props.z} \n                <br></br>\n                <button onClick={this.props.incrementY}>Increment Y</button>\n            </div>\n        )\n    }\n}\n\n//redux specific mappers\n\nconst mapStateToProps = (state) => ({\n  z:state.z\n});\n\nconst mapDispatchToProps=(dispatch) =>({\n    incrementY:()=>dispatch({\n        type:'INCREMENT_Y'\n    })\n})\n\n//export\nexport default connect(mapStateToProps, mapDispatchToProps)(C)\n\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nclass D extends Component {\n    render() {\n        return (\n            <div>\n                D, w = {this.props.w} \n                <br></br>\n                <button onClick={this.props.incrementW}>Increment ODD from x</button>\n            </div>\n        )\n    }\n}\n\n//redux specific mappers\n\nconst mapStateToProps = (state) => ({\n  w:state.w\n});\n\nconst mapDispatchToProps=(dispatch) =>({\n    incrementW:()=>dispatch({\n        type:'INCREMENT_W'\n    })\n})\n\n//export\nexport default connect(mapStateToProps, mapDispatchToProps)(D)\n\n","import React from 'react';\nimport A from './Component/A';\nimport B from './Component/B';\nimport C from './Component/C';\nimport D from './Component/D';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      React Redux Increment-Demo\n      <A />\n      <B />\n      <C />\n      <D />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n    x:0,\n    y:0,\n    z:0,\n    w:0\n}\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case 'INCREMENT_X':\n        return { \n            x:state.x+1,\n            y:state.y,\n            z:state.z,\n            w:state.w\n        }\n        case 'INCREMENT_Y':\n        return { \n            x:state.x,\n            y:state.y+1,\n            z:state.z,\n            w:state.w\n        }\n        case 'INCREMENT_Z':\n        return { \n            x:state.x,\n            y:state.y,\n            z:state.z+1,\n            w:state.w\n        }\n        case 'INCREMENT_W':\n        if(state.x%2===0){\n        return { \n            x:state.x,\n            y:state.y,\n            z:state.z,\n            w:state.w+1\n        \n        }\n        }else{\n            return{\n            x:state.x,\n            y:state.y,\n            z:state.z,\n            w:state.w\n            }\n        }\n    \n    default:\n        return state\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n//redux imports\nimport reducer from './reducer';\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\n\nconst store = createStore(reducer)\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}